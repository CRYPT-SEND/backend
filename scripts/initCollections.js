"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const firebase_admin_1 = __importDefault(require("firebase-admin"));
const firebase_1 = require("../config/firebase");
async function createCollectionsWithSampleDocs() {
    // S'assurer que Firebase est bien initialisé avant d'utiliser Firestore
    await firebase_1.firebaseInitPromise;
    const db = firebase_admin_1.default.firestore();
    // Un exemple de document pour chaque collection, basé sur tes modèles
    const now = new Date();
    const collectionsWithDocs = {
        users: {
            id: 'sampleUserId',
            phone: '+123456789',
            email: 'sample@example.com',
            passwordHash: 'hash',
            country: 'FR',
            preferredCurrencyId: 'EUR',
            kycLevelId: 'L1',
            statusId: 'ACTIVE',
            twoFAEnabled: false,
            deviceIds: ['device1'],
            lastLoginAt: now,
            riskScore: 0,
            createdAt: now,
            updatedAt: now,
        },
        kyc_profiles: {
            id: 'sampleKycId',
            userId: 'sampleUserId',
            levelId: 'L1',
            statusId: 'PENDING',
            documents: [],
            limits: { dailyLimit: 1000, monthlyLimit: 10000, yearlyLimit: 100000 },
            pepScreened: false,
            sanctionsScreened: false,
            notes: '',
            createdAt: now,
            updatedAt: now,
        },
        wallets: {
            id: 'sampleWalletId',
            userId: 'sampleUserId',
            typeId: 'CUSTODIAL',
            networkId: 'ETHEREUM',
            address: '0x123',
            balance: { ETH: 1.23 },
            statusId: 'ACTIVE',
            createdAt: now,
            lastSyncAt: now,
        },
        quotes: {
            id: 'sampleQuoteId',
            fromCurrency: 'EUR',
            toCurrency: 'BTC',
            fromAmount: 100,
            toAmountEstimated: 0.002,
            exchangeRate: 50000,
            fees: { fixed: 1, percent: 0.5, network: 0.1, total: 1.6 },
            marginBps: 10,
            slippageMaxBps: 5,
            lockedRate: true,
            expiresAt: now,
            source: 'test',
            corridor: 'EU-AFR',
            idempotencyKey: 'key',
            signature: 'sig',
            createdAt: now,
        },
        transfer_orders: {
            id: 'sampleOrderId',
            userId: 'sampleUserId',
            quoteId: 'sampleQuoteId',
            fromCurrency: 'EUR',
            toCurrency: 'BTC',
            fromAmount: 100,
            toAmountTarget: 0.002,
            feeTotal: 1.6,
            status: 'CREATED',
            receiver: { method: 'BANK', details: {} },
            timeline: [],
            correlationId: 'corr',
            retryCount: 0,
            expiresAt: now,
            createdAt: now,
            updatedAt: now,
        },
        fiat_transactions: {
            id: 'sampleFiatTx',
            userId: 'sampleUserId',
            orderId: 'sampleOrderId',
            type: 'DEPOSIT',
            currency: 'EUR',
            amount: 100,
            fees: 1,
            netAmount: 99,
            method: 'BANK',
            status: 'PENDING',
            metadata: {},
            createdAt: now,
        },
        crypto_transactions: {
            id: 'sampleCryptoTx',
            userId: 'sampleUserId',
            orderId: 'sampleOrderId',
            type: 'DEPOSIT',
            network: 'ETHEREUM',
            currency: 'ETH',
            amount: 1.23,
            fees: 0.01,
            netAmount: 1.22,
            toAddress: '0x123',
            confirmations: 1,
            requiredConfirmations: 12,
            status: 'PENDING',
            metadata: {},
            createdAt: now,
        },
        ledger_entries: {
            id: 'sampleLedger',
            userId: 'sampleUserId',
            type: 'CREDIT',
            currency: 'EUR',
            amount: 100,
            balance: 1000,
            description: 'Test',
            metadata: {},
            createdAt: now,
        },
        notifications: {
            id: 'sampleNotif',
            userId: 'sampleUserId',
            type: 'EMAIL',
            channel: 'test',
            subject: 'Hello',
            content: 'Test',
            status: 'PENDING',
            retryCount: 0,
            scheduledAt: now,
        },
        audit_logs: {
            id: 'sampleAudit',
            userId: 'sampleUserId',
            action: 'CREATE',
            resource: 'user',
            resourceId: 'sampleUserId',
            changes: {},
            ipAddress: '127.0.0.1',
            userAgent: 'test',
            timestamp: now,
        },
        rate_limits: {
            id: 'sampleRate',
            userId: 'sampleUserId',
            limit: 100,
            window: '1h',
            count: 1,
            createdAt: now,
        },
        currencies: {
            id: 'EUR',
            value: 'Euro',
            isActive: true,
            createdAt: now,
            updatedAt: now,
        },
        networks: {
            id: 'ETHEREUM',
            value: 'Ethereum',
            isActive: true,
            createdAt: now,
            updatedAt: now,
        },
        payment_methods: {
            id: 'BANK',
            value: 'Bank',
            isActive: true,
            createdAt: now,
            updatedAt: now,
        },
        kyc_levels: {
            id: 'L1',
            value: 'Niveau 1',
            isActive: true,
            createdAt: now,
            updatedAt: now,
        },
        kyc_statuses: {
            id: 'PENDING',
            value: 'En attente',
            isActive: true,
            createdAt: now,
            updatedAt: now,
        },
        user_statuses: {
            id: 'ACTIVE',
            value: 'Actif',
            isActive: true,
            createdAt: now,
            updatedAt: now,
        },
        order_statuses: {
            id: 'CREATED',
            value: 'Créé',
            isActive: true,
            createdAt: now,
            updatedAt: now,
        },
        wallet_types: {
            id: 'CUSTODIAL',
            value: 'Custodial',
            isActive: true,
            createdAt: now,
            updatedAt: now,
        },
        wallet_statuses: {
            id: 'ACTIVE',
            value: 'Actif',
            isActive: true,
            createdAt: now,
            updatedAt: now,
        },
    };
    for (const [col, doc] of Object.entries(collectionsWithDocs)) {
        await db.collection(col).doc('_sample').set(doc);
    }
    console.log('Toutes les collections ont été initialisées avec un document exemple.');
}
createCollectionsWithSampleDocs();
